INSERT INTO `implementation` (`id`, `fullName`, `uploader`, `name`, `version`, `external_version`, `creator`, `contributor`, `uploadDate`, `licence`, `language`, `description`, `fullDescription`, `installationNotes`, `dependencies`, `implements`, `binary_file_id`, `source_file_id`) VALUES
(1, 'openml.evaluation.EuclideanDistance(1.0)', NULL, 'openml.evaluation.EuclideanDistance', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "EuclideanDistance"', '', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'EuclideanDistance', NULL, NULL),
(2, 'openml.evaluation.PolynomialKernel(1.0)', NULL, 'openml.evaluation.PolynomialKernel', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "PolynomialKernel"', '', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'PolynomialKernel', NULL, NULL),
(3, 'openml.evaluation.RBFKernel(1.0)', NULL, 'openml.evaluation.RBFKernel', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "RBFKernel"', '', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'RBFKernel', NULL, NULL),
(4, 'openml.evaluation.area_under_roc_curve(1.0)', NULL, 'openml.evaluation.area_under_roc_curve', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "area_under_roc_curve"', 'The area under the ROC curve (AUROC), calculated using the Mann-Whitney U-test.\n\nThe curve is constructed by shifting the threshold for a positive prediction from 0 to 1, yielding a series of true positive rates (TPR) and false positive rates (FPR), from which a step-wise ROC curve can be constructed.\n\nSee http://en.wikipedia.org/wiki/Receiver_operating_characteristic\n\nNote that this is different from the Area Under the ROC Convex Hull (ROC AUCH).\n\nAUROC is defined only for a specific class value, and should thus be labeled with the class value for which is was computed. Use the mean_weighted_area_under_roc_curve for the weighted average over all class values.', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'area_under_roc_curve', NULL, NULL),
(5, 'openml.evaluation.average_cost(1.0)', NULL, 'openml.evaluation.average_cost', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "average_cost"', '', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'average_cost', NULL, NULL),
(6, 'openml.evaluation.build_cpu_time(1.0)', NULL, 'openml.evaluation.build_cpu_time', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "build_cpu_time"', 'The time in seconds to build a single model on all data.', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'build_cpu_time', NULL, NULL),
(7, 'openml.evaluation.build_memory(1.0)', NULL, 'openml.evaluation.build_memory', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "build_memory"', 'The memory, in bytes, needed to build a single model on all data.', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'build_memory', NULL, NULL),
(8, 'openml.evaluation.class_complexity(1.0)', NULL, 'openml.evaluation.class_complexity', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "class_complexity"', 'Entropy, in bits, of the class distribution generated by the model''s predictions. Calculated by taking the sum of -log2(predictedProb) over all instances, where predictedProb is the probability (according to the model) of the actual class for that instance. If instances are weighted, the weighted sum is taken.', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'class_complexity', NULL, NULL),
(9, 'openml.evaluation.class_complexity_gain(1.0)', NULL, 'openml.evaluation.class_complexity_gain', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "class_complexity_gain"', 'Entropy reduction, in bits, between the class distribution generated by the model''s predictions, and the prior class distribution. Calculated by taking the difference of the prior_class_complexity and the class_complexity.', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'class_complexity_gain', NULL, NULL),
(10, 'openml.evaluation.confusion_matrix(1.0)', NULL, 'openml.evaluation.confusion_matrix', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "confusion_matrix"', 'None', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'confusion_matrix', NULL, NULL),
(11, 'openml.evaluation.correlation_coefficient(1.0)', NULL, 'openml.evaluation.correlation_coefficient', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "correlation_coefficient"', 'None', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'correlation_coefficient', NULL, NULL),
(12, 'openml.evaluation.f_measure(1.0)', NULL, 'openml.evaluation.f_measure', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "f_measure"', 'The F-Measure is the harmonic mean of precision and recall, also known as the the traditional F-measure, balanced F-score, or F1-score:\n\nFormula:\n2*Precision*Recall/(Precision+Recall)\n\nSee:\nhttp://en.wikipedia.org/wiki/Precision_and_recall\n\nF-measure is defined only for a specific class value, and should thus be labeled with the class value for which is was computed. Use the mean_weighted_f_measure for the weighted average over all class values.', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'f_measure', NULL, NULL),
(13, 'openml.evaluation.kappa(1.0)', NULL, 'openml.evaluation.kappa', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "kappa"', 'None', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'kappa', NULL, NULL),
(14, 'openml.evaluation.kb_relative_information_score(1.0)', NULL, 'openml.evaluation.kb_relative_information_score', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "kb_relative_information_score"', 'The Kononenko and Bratko Information score, divided by the prior entropy of the class distribution.\n\nSee:\nKononenko, I., Bratko, I.: Information-based evaluation criterion for classier''s performance. Machine\nLearning 6 (1991) 67-80', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'kb_relative_information_score', NULL, NULL),
(15, 'openml.evaluation.kohavi_wolpert_bias_squared(1.0)', NULL, 'openml.evaluation.kohavi_wolpert_bias_squared', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "kohavi_wolpert_bias_squared"', 'Bias component (squared) of the bias-variance decomposition as defined by Kohavi and Wolpert in:\n\nR. Kohavi &amp; D. Wolpert (1996), Bias plus variance decomposition for zero-one loss functions, in Proc. of the Thirteenth International Machine Learning Conference (ICML96)\n\nThis quantity measures how closely\nthe learning algorithms average guess over all possible training sets of the given training set size matches the target.\n\nEstimated using the classifier using the sub-sampled cross-validation procedure as specified in:\n\nGeoffrey I. Webb &amp; Paul Conilione (2002), Estimating bias and variance from data , School of Computer Science and Software Engineering, Monash University, Australia', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'kohavi_wolpert_bias_squared', NULL, NULL),
(16, 'openml.evaluation.kohavi_wolpert_error(1.0)', NULL, 'openml.evaluation.kohavi_wolpert_error', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "kohavi_wolpert_error"', 'Error rate measured in the bias-variance decomposition as defined by Kohavi and Wolpert in:\n\nR. Kohavi &amp; D. Wolpert (1996), Bias plus variance decomposition for zero-one loss functions, in Proc. of the Thirteenth International Machine Learning Conference (ICML96)\n\nEstimated using the classifier using the sub-sampled cross-validation procedure as specified in:\n\nGeoffrey I. Webb &amp; Paul Conilione (2002), Estimating bias and variance from data , School of Computer Science and Software Engineering, Monash University, Australia', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'kohavi_wolpert_error', NULL, NULL),
(17, 'openml.evaluation.kohavi_wolpert_sigma_squared(1.0)', NULL, 'openml.evaluation.kohavi_wolpert_sigma_squared', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "kohavi_wolpert_sigma_squared"', 'Intrinsic error component (squared) of the bias-variance decomposition as defined by Kohavi and Wolpert in:\n\nR. Kohavi and D. Wolpert (1996), Bias plus variance decomposition for zero-one loss functions, in Proc. of the Thirteenth International Machine Learning Conference (ICML96)\n\nThis quantity is a lower bound on the expected cost of any learning algorithm. It is the expected cost of the Bayes optimal classifier.\n\nEstimated using the classifier using the sub-sampled cross-validation procedure as specified in:\n\nGeoffrey I. Webb &amp; Paul Conilione (2002), Estimating bias and variance from data , School of Computer Science and Software Engineering, Monash University, Australia', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'kohavi_wolpert_sigma_squared', NULL, NULL),
(18, 'openml.evaluation.kohavi_wolpert_variance(1.0)', NULL, 'openml.evaluation.kohavi_wolpert_variance', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "kohavi_wolpert_variance"', 'Variance component of the bias-variance decomposition as defined by Kohavi and Wolpert in:\n\nR. Kohavi and D. Wolpert (1996), Bias plus variance decomposition for zero-one loss functions, in Proc. of the Thirteenth International Machine Learning Conference (ICML96)\n\nThis quantity measures how much the\nlearning algorithms guess &quot;bounces around&quot; for the different training sets of the given size.\n\nEstimated using the classifier using the sub-sampled cross-validation procedure as specified in:\n\nGeoffrey I. Webb &amp; Paul Conilione (2002), Estimating bias and variance from data , School of Computer Science and Software Engineering, Monash University, Australia', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'kohavi_wolpert_variance', NULL, NULL),
(19, 'openml.evaluation.kononenko_bratko_information_score(1.0)', NULL, 'openml.evaluation.kononenko_bratko_information_score', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "kononenko_bratko_information_score"', 'Kononenko and Bratko Information score. This measures predictive accuracy but eliminates the influence of prior probabilities.\n\nSee:\nKononenko, I., Bratko, I.: Information-based evaluation criterion for classier''s performance. Machine\nLearning 6 (1991) 67-80', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'kononenko_bratko_information_score', NULL, NULL),
(20, 'openml.evaluation.matthews_correlation_coefficient(1.0)', NULL, 'openml.evaluation.matthews_correlation_coefficient', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "matthews_correlation_coefficient"', 'None', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'matthews_correlation_coefficient', NULL, NULL),
(21, 'openml.evaluation.mean_absolute_error(1.0)', NULL, 'openml.evaluation.mean_absolute_error', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "mean_absolute_error"', 'The mean absolute error (MAE) measures how close the model''s predictions are to the actual target values. It is the sum of the absolute value of the difference of each instance prediction and the actual value. For classification, the 0/1-error is used.\n\n&lt;math&gt;mathrm{MAE} = frac{1}{n}sum_{i=1}^n left| f_i-y_i\right| =frac{1}{n}sum_{i=1}^n left| e_i \right|.&lt;/math&gt;\n\nSee:\nhttp://en.wikipedia.org/wiki/Mean_absolute_error', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'mean_absolute_error', NULL, NULL),
(22, 'openml.evaluation.mean_class_complexity(1.0)', NULL, 'openml.evaluation.mean_class_complexity', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "mean_class_complexity"', 'The entropy of the class distribution generated by the model (see class_complexity), divided by the number of instances in the input data.', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'mean_class_complexity', NULL, NULL),
(23, 'openml.evaluation.mean_class_complexity_gain(1.0)', NULL, 'openml.evaluation.mean_class_complexity_gain', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "mean_class_complexity_gain"', 'The entropy gain of the class distribution  by the model over the prior distribution (see class_complexity_gain), divided by the number of instances in the input data.', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'mean_class_complexity_gain', NULL, NULL),
(24, 'openml.evaluation.mean_f_measure(1.0)', NULL, 'openml.evaluation.mean_f_measure', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "mean_f_measure"', 'None', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'mean_f_measure', NULL, NULL),
(25, 'openml.evaluation.mean_kononenko_bratko_information_score(1.0)', NULL, 'openml.evaluation.mean_kononenko_bratko_information_score', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "mean_kononenko_bratko_information_score"', 'Kononenko and Bratko Information score, see kononenko_bratko_information_score, divided by the number of instances in the input data.\n\nSee:\nKononenko, I., Bratko, I.: Information-based evaluation criterion for classier''s performance. Machine\nLearning 6 (1991) 67-80', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'mean_kononenko_bratko_information_score', NULL, NULL),
(26, 'openml.evaluation.mean_precision(1.0)', NULL, 'openml.evaluation.mean_precision', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "mean_precision"', 'None', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'mean_precision', NULL, NULL),
(27, 'openml.evaluation.mean_prior_absolute_error(1.0)', NULL, 'openml.evaluation.mean_prior_absolute_error', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "mean_prior_absolute_error"', 'The mean prior absolute error (MPAE) is the mean absolute error (see mean_absolute_error) of the prior (e.g., default class prediction).\n\nSee:\nhttp://en.wikipedia.org/wiki/Mean_absolute_error', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'mean_prior_absolute_error', NULL, NULL),
(28, 'openml.evaluation.mean_prior_class_complexity(1.0)', NULL, 'openml.evaluation.mean_prior_class_complexity', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "mean_prior_class_complexity"', 'The entropy of the class distribution of the prior (see prior_class_complexity), divided by the number of instances in the input data.', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'mean_prior_class_complexity', NULL, NULL),
(29, 'openml.evaluation.mean_recall(1.0)', NULL, 'openml.evaluation.mean_recall', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "mean_recall"', 'None', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'mean_recall', NULL, NULL),
(30, 'openml.evaluation.mean_weighted_area_under_roc_curve(1.0)', NULL, 'openml.evaluation.mean_weighted_area_under_roc_curve', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "mean_weighted_area_under_roc_curve"', 'None', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'mean_weighted_area_under_roc_curve', NULL, NULL),
(31, 'openml.evaluation.mean_weighted_f_measure(1.0)', NULL, 'openml.evaluation.mean_weighted_f_measure', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "mean_weighted_f_measure"', 'None', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'mean_weighted_f_measure', NULL, NULL),
(32, 'openml.evaluation.mean_weighted_precision(1.0)', NULL, 'openml.evaluation.mean_weighted_precision', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "mean_weighted_precision"', 'None', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'mean_weighted_precision', NULL, NULL),
(33, 'openml.evaluation.mean_weighted_recall(1.0)', NULL, 'openml.evaluation.mean_weighted_recall', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "mean_weighted_recall"', 'None', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'mean_weighted_recall', NULL, NULL),
(34, 'openml.evaluation.number_of_instances(1.0)', NULL, 'openml.evaluation.number_of_instances', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "number_of_instances"', NULL, 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'number_of_instances', NULL, NULL),
(35, 'openml.evaluation.precision(1.0)', NULL, 'openml.evaluation.precision', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "precision"', 'Precision is defined as the number of true positive (TP) predictions, divided by the sum of the number of true positives and false positives (TP+FP):\n\n&lt;math&gt;	ext{Precision}=frac{tp}{tp+fp} , &lt;/math&gt;\n\nIt is also referred to as the Positive predictive value (PPV).\n\nSee:\nhttp://en.wikipedia.org/wiki/Precision_and_recall\n\nPrecision is defined only for a specific class value, and should thus be labeled with the class value for which is was computed. Use the mean_weighted_precision for the weighted average over all class values.', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'precision', NULL, NULL),
(36, 'openml.evaluation.predictive_accuracy(1.0)', NULL, 'openml.evaluation.predictive_accuracy', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "predictive_accuracy"', 'The Predictive Accuracy is the percentage of instances that are classified correctly. Is it 1 - ErrorRate.', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'predictive_accuracy', NULL, NULL),
(37, 'openml.evaluation.prior_class_complexity(1.0)', NULL, 'openml.evaluation.prior_class_complexity', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "prior_class_complexity"', 'Entropy, in bits, of the prior class distribution. Calculated by taking the sum of -log2(priorProb) over all instances, where priorProb is the prior probability of the actual class for that instance. If instances are weighted, the weighted sum is taken.', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'prior_class_complexity', NULL, NULL),
(38, 'openml.evaluation.prior_entropy(1.0)', NULL, 'openml.evaluation.prior_entropy', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "prior_entropy"', 'Entropy, in bits, of the prior class distribution. Calculated by taking the sum of -log2(priorProb) over all instances, where priorProb is the prior probability of the actual class for that instance. If instances are weighted, the weighted sum is taken.', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'prior_entropy', NULL, NULL),
(39, 'openml.evaluation.recall(1.0)', NULL, 'openml.evaluation.recall', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "recall"', 'Recall is defined as the number of true positive (TP) predictions, divided by the sum of the number of true positives and false negatives (TP+FN):\n\n&lt;math&gt;	ext{Recall}=frac{tp}{tp+fn} , &lt;/math&gt;\n\nIt is also referred to as the True Positive Rate (TPR) or Sensitivity.\n\nSee:\nhttp://en.wikipedia.org/wiki/Precision_and_recall\n\nRecall is defined only for a specific class value, and should thus be labeled with the class value for which is was computed. Use the mean_weighted_recall for the weighted average over all class values.', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'recall', NULL, NULL),
(40, 'openml.evaluation.relative_absolute_error(1.0)', NULL, 'openml.evaluation.relative_absolute_error', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "relative_absolute_error"', 'The Relative Absolute Error (RAE) is the mean absolute error (MAE) divided by the mean prior absolute error (MPAE).', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'relative_absolute_error', NULL, NULL),
(41, 'openml.evaluation.root_mean_prior_squared_error(1.0)', NULL, 'openml.evaluation.root_mean_prior_squared_error', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "root_mean_prior_squared_error"', 'The Root Mean Prior Squared Error (RMPSE) is the Root Mean Squared Error (RMSE) of the prior (e.g., the default class prediction).', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'root_mean_prior_squared_error', NULL, NULL),
(42, 'openml.evaluation.root_mean_squared_error(1.0)', NULL, 'openml.evaluation.root_mean_squared_error', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "root_mean_squared_error"', 'The Root Mean Squared Error (RMSE) measures how close the model''s predictions are to the actual target values. It is the square root of the Mean Squared Error (MSE), the sum of the squared differences between the predicted value and the actual value. For classification, the 0/1-error is used.\n\n:&lt;math&gt;operatorname{MSE}(overline{X})=operatorname{E}((overline{X}-mu)^2)=left(frac{sigma}{sqrt{n}}\right)^2= frac{sigma^2}{n}&lt;/math&gt;\n\nSee:\nhttp://en.wikipedia.org/wiki/Mean_squared_error', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'root_mean_squared_error', NULL, NULL),
(43, 'openml.evaluation.root_relative_squared_error(1.0)', NULL, 'openml.evaluation.root_relative_squared_error', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "root_relative_squared_error"', 'The Root Relative Squared Error (RRSE) is the Root Mean Squared Error (RMSE) divided by the Root Mean Prior Squared Error (RMPSE). See root_mean_squared_error and root_mean_prior_squared_error.', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'root_relative_squared_error', NULL, NULL),
(44, 'openml.evaluation.run_cpu_time(1.0)', NULL, 'openml.evaluation.run_cpu_time', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "run_cpu_time"', 'Runtime in seconds of the entire run. In the case of cross-validation runs, this will include all iterations.', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'run_cpu_time', NULL, NULL),
(45, 'openml.evaluation.run_memory(1.0)', NULL, 'openml.evaluation.run_memory', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "run_memory"', 'Amount of memory, in bytes, used during  the entire run.', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'run_memory', NULL, NULL),
(46, 'openml.evaluation.run_virtual_memory(1.0)', NULL, 'openml.evaluation.run_virtual_memory', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "run_virtual_memory"', 'Amount of virtual memory, in bytes, used during  the entire run.', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'run_virtual_memory', NULL, NULL),
(47, 'openml.evaluation.single_point_area_under_roc_curve(1.0)', NULL, 'openml.evaluation.single_point_area_under_roc_curve', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "single_point_area_under_roc_curve"', '', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'single_point_area_under_roc_curve', NULL, NULL),
(48, 'openml.evaluation.total_cost(1.0)', NULL, 'openml.evaluation.total_cost', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "total_cost"', '', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'total_cost', NULL, NULL),
(49, 'openml.evaluation.unclassified_instance_count(1.0)', NULL, 'openml.evaluation.unclassified_instance_count', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "unclassified_instance_count"', 'Number of instances that were not classified by the model.', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'unclassified_instance_count', NULL, NULL),
(50, 'openml.evaluation.webb_bias(1.0)', NULL, 'openml.evaluation.webb_bias', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "webb_bias"', 'Bias component (squared) of the bias-variance decomposition as defined by Webb in:\n\nGeoffrey I. Webb (2000), MultiBoosting: A Technique for Combining Boosting and Wagging, Machine Learning, 40(2), pages 159-196.\n\nThis quantity measures how closely\nthe learning algorithms average guess over all possible training sets of the given training set size matches the target.\n\nEstimated using the classifier using the sub-sampled cross-validation procedure as specified in:\n\nGeoffrey I. Webb &amp; Paul Conilione (2002), Estimating bias and variance from data , School of Computer Science and Software Engineering, Monash University, Australia', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'webb_bias', NULL, NULL),
(51, 'openml.evaluation.webb_error(1.0)', NULL, 'openml.evaluation.webb_error', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "webb_error"', 'Intrinsic error component (squared) of the bias-variance decomposition as defined by Webb in:\n\nGeoffrey I. Webb (2000), MultiBoosting: A Technique for Combining Boosting and Wagging, Machine Learning, 40(2), pages 159-196.\n\nThis quantity is a lower bound on the expected cost of any learning algorithm. It is the expected cost of the Bayes optimal classifier.\n\nEstimated using the classifier using the sub-sampled cross-validation procedure as specified in:\n\nGeoffrey I. Webb &amp; Paul Conilione (2002), Estimating bias and variance from data , School of Computer Science and Software Engineering, Monash University, Australia', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'webb_error', NULL, NULL),
(52, 'openml.evaluation.webb_variance(1.0)', NULL, 'openml.evaluation.webb_variance', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'An implementation of the evaluation measure "webb_variance"', 'Variance component of the bias-variance decomposition as defined by Webb in:\n\nGeoffrey I. Webb (2000), MultiBoosting: A Technique for Combining Boosting and Wagging, Machine Learning, 40(2), pages 159-196.\n\nThis quantity measures how much the\nlearning algorithms guess &quot;bounces around&quot; for the different training sets of the given size.\n\nEstimated using the classifier using the sub-sampled cross-validation procedure as specified in:\n\nGeoffrey I. Webb &amp; Paul Conilione (2002), Estimating bias and variance from data , School of Computer Science and Software Engineering, Monash University, Australia', 'Runs on OpenML servers', 'Build on top of Weka API (Jar version 3.?.?)', 'webb_variance', NULL, NULL),
(53, 'openml.userdefined.os_information(1.0)', NULL, 'openml.userdefined.os_information', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'Default information about OS, JVM, installations, etc. ', NULL, 'Information that the user might send to OpenML servers. ', NULL, 'os_information', NULL, NULL),
(54, 'openml.userdefined.ram_hours(1.0)', NULL, 'openml.userdefined.ram_hours', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'Every GB of RAM deployed for 1 hour equals one RAM-Hour.', NULL, 'Information that the user might send to OpenML servers. ', NULL, 'ram_hours', NULL, NULL),
(55, 'openml.userdefined.scimark_benchmark(1.0)', NULL, 'openml.userdefined.scimark_benchmark', '1.0', '', 'Jan N. van Rijn', '"Bernd Bischl","Luis Torgo","Bo Gao","Venkatesh Umaashankar","Simon Fischer","Patrick Winter","Bernd Wiswedel","Michael R. Berthold","Joaquin Vanschoren"', '2014-01-16 14:12:56', 'public domain', 'english', 'Information of the CPU performance on which the run was performed', NULL, 'Information that the user might send to OpenML servers. ', NULL, 'scimark_benchmark', NULL, NULL),
(56, 'weka.ZeroR(1)', NULL, 'weka.ZeroR', '1', 'Weka_3.7.10_8034', NULL, NULL, '2014-04-04 14:38:33', NULL, 'English', 'Weka implementation of ZeroR', NULL, NULL, 'Weka_3.7.10', NULL, NULL, NULL),
(57, 'weka.OneR(1)', NULL, 'weka.OneR', '1', 'Weka_3.7.10_9920', NULL, NULL, '2014-04-04 14:39:03', NULL, 'English', 'R.C. Holte (1993). Very simple classification rules perform well on most commonly used datasets. Machine Learning. 11:63-91.', NULL, NULL, 'Weka_3.7.10', NULL, NULL, NULL),
(58, 'weka.NaiveBayes(1)', NULL, 'weka.NaiveBayes', '1', 'Weka_3.7.10_9785', NULL, NULL, '2014-04-04 14:39:07', NULL, 'English', 'George H. John, Pat Langley: Estimating Continuous Distributions in Bayesian Classifiers. In: Eleventh Conference on Uncertainty in Artificial Intelligence, San Mateo, 338-345, 1995.', NULL, NULL, 'Weka_3.7.10', NULL, NULL, NULL),
(59, 'weka.JRip(1)', NULL, 'weka.JRip', '1', 'Weka_3.7.10_8118', NULL, NULL, '2014-04-04 14:39:10', NULL, 'English', 'William W. Cohen: Fast Effective Rule Induction. In: Twelfth International Conference on Machine Learning, 115-123, 1995.', NULL, NULL, 'Weka_3.7.10', NULL, NULL, NULL),
(60, 'weka.J48(1)', NULL, 'weka.J48', '1', 'Weka_3.7.10_9117', NULL, NULL, '2014-04-04 14:39:13', NULL, 'English', 'Ross Quinlan (1993). C4.5: Programs for Machine Learning. Morgan Kaufmann Publishers, San Mateo, CA.', NULL, NULL, 'Weka_3.7.10', NULL, NULL, NULL),
(61, 'weka.REPTree(1)', NULL, 'weka.REPTree', '1', 'Weka_3.7.10_9378', NULL, NULL, '2014-04-04 14:39:17', NULL, 'English', 'Weka implementation of REPTree', NULL, NULL, 'Weka_3.7.10', NULL, NULL, NULL),
(62, 'weka.DecisionStump(1)', NULL, 'weka.DecisionStump', '1', 'Weka_3.7.10_9171', NULL, NULL, '2014-04-04 14:39:21', NULL, 'English', 'Weka implementation of DecisionStump', NULL, NULL, 'Weka_3.7.10', NULL, NULL, NULL),
(63, 'weka.HoeffdingTree(1)', NULL, 'weka.HoeffdingTree', '1', 'Weka_3.7.10_9766', NULL, NULL, '2014-04-04 14:39:24', NULL, 'English', 'Geoff Hulten, Laurie Spencer, Pedro Domingos: Mining time-changing data streams. In: ACM SIGKDD Intl. Conf. on Knowledge Discovery and Data Mining, 97-106, 2001.', NULL, NULL, 'Weka_3.7.10', NULL, NULL, NULL),
(64, 'weka.RandomTree(1)', NULL, 'weka.RandomTree', '1', 'Weka_3.7.10_8034', NULL, NULL, '2014-04-04 14:39:28', NULL, 'English', 'Weka implementation of RandomTree', NULL, NULL, 'Weka_3.7.10', NULL, NULL, NULL),
(65, 'weka.RandomForest(1)', NULL, 'weka.RandomForest', '1', 'Weka_3.7.10_9186', NULL, NULL, '2014-04-04 14:39:31', NULL, 'English', 'Leo Breiman (2001). Random Forests. Machine Learning. 45(1):5-32.', NULL, NULL, 'Weka_3.7.10', NULL, NULL, NULL),
(66, 'weka.IBk(1)', NULL, 'weka.IBk', '1', 'Weka_3.7.10_8034', NULL, NULL, '2014-04-04 14:39:35', NULL, 'English', 'D. Aha, D. Kibler (1991). Instance-based learning algorithms. Machine Learning. 6:37-66.', NULL, NULL, 'Weka_3.7.10', NULL, NULL, NULL),
(67, 'weka.BayesNet_K2(1)', NULL, 'weka.BayesNet_K2', '1', 'Weka_3.7.10_8034', NULL, NULL, '2014-04-04 14:39:39', NULL, 'English', 'Weka implementation of BayesNet', NULL, NULL, 'Weka_3.7.10', NULL, NULL, NULL),
(68, 'weka.K2(1)', NULL, 'weka.K2', '1', 'Weka_3.7.10_8034', NULL, NULL, '2014-04-04 14:39:39', NULL, 'English', 'G.F. Cooper, E. Herskovits (1990). A Bayesian method for constructing Bayesian belief networks from databases.\n\nG. Cooper, E. Herskovits (1992). A Bayesian method for the induction of probabilistic networks from data. Machine Learning. 9(4):309-347.', NULL, NULL, 'Weka_3.7.10', NULL, NULL, NULL),
(69, 'weka.SGD(1)', NULL, 'weka.SGD', '1', 'Weka_3.7.10_9785', NULL, NULL, '2014-04-04 14:39:42', NULL, 'English', 'Weka implementation of SGD', NULL, NULL, 'Weka_3.7.10', NULL, NULL, NULL),
(70, 'weka.SMO_PolyKernel(1)', NULL, 'weka.SMO_PolyKernel', '1', 'Weka_3.7.10_8034', NULL, NULL, '2014-04-04 14:39:43', NULL, 'English', 'J. Platt: Fast Training of Support Vector Machines using Sequential Minimal Optimization. In B. Schoelkopf and C. Burges and A. Smola, editors, Advances in Kernel Methods - Support Vector Learning, 1998.\n\nS.S. Keerthi, S.K. Shevade, C. Bhattacharyya, K.R.K. Murthy (2001). Improvements to Platt''s SMO Algorithm for SVM Classifier Design. Neural Computation. 13(3):637-649.\n\nTrevor Hastie, Robert Tibshirani: Classification by Pairwise Coupling. In: Advances in Neural Information Processing Systems, 1998.', NULL, NULL, 'Weka_3.7.10', NULL, NULL, NULL),
(71, 'weka.PolyKernel(1)', NULL, 'weka.PolyKernel', '1', 'Weka_3.7.10_8034', NULL, NULL, '2014-04-04 14:39:43', NULL, 'English', 'Weka implementation of PolyKernel', NULL, NULL, 'Weka_3.7.10', NULL, NULL, NULL),
(72, 'weka.SMO_RBFKernel(1)', NULL, 'weka.SMO_RBFKernel', '1', 'Weka_3.7.10_8034', NULL, NULL, '2014-04-04 14:39:48', NULL, 'English', 'J. Platt: Fast Training of Support Vector Machines using Sequential Minimal Optimization. In B. Schoelkopf and C. Burges and A. Smola, editors, Advances in Kernel Methods - Support Vector Learning, 1998.\n\nS.S. Keerthi, S.K. Shevade, C. Bhattacharyya, K.R.K. Murthy (2001). Improvements to Platt''s SMO Algorithm for SVM Classifier Design. Neural Computation. 13(3):637-649.\n\nTrevor Hastie, Robert Tibshirani: Classification by Pairwise Coupling. In: Advances in Neural Information Processing Systems, 1998.', NULL, NULL, 'Weka_3.7.10', NULL, NULL, NULL),
(73, 'weka.RBFKernel(1)', NULL, 'weka.RBFKernel', '1', 'Weka_3.7.10_8034', NULL, NULL, '2014-04-04 14:39:48', NULL, 'English', 'Weka implementation of RBFKernel', NULL, NULL, 'Weka_3.7.10', NULL, NULL, NULL),
(74, 'weka.Logistic(1)', NULL, 'weka.Logistic', '1', 'Weka_3.7.10_9785', NULL, NULL, '2014-04-04 14:39:52', NULL, 'English', 'le Cessie, S., van Houwelingen, J.C. (1992). Ridge Estimators in Logistic Regression. Applied Statistics. 41(1):191-201.', NULL, NULL, 'Weka_3.7.10', NULL, NULL, NULL),
(75, 'weka.AdaBoostM1_DecisionStump(1)', NULL, 'weka.AdaBoostM1_DecisionStump', '1', 'Weka_3.7.10_9186', NULL, NULL, '2014-04-04 14:39:56', NULL, 'English', 'Yoav Freund, Robert E. Schapire: Experiments with a new boosting algorithm. In: Thirteenth International Conference on Machine Learning, San Francisco, 148-156, 1996.', NULL, NULL, 'Weka_3.7.10', NULL, NULL, NULL),
(76, 'weka.Bagging_REPTree(1)', NULL, 'weka.Bagging_REPTree', '1', 'Weka_3.7.10_9785', NULL, NULL, '2014-04-04 14:40:00', NULL, 'English', 'Leo Breiman (1996). Bagging predictors. Machine Learning. 24(2):123-140.', NULL, NULL, 'Weka_3.7.10', NULL, NULL, NULL),
(77, 'weka.LogitBoost_DecisionStump(1)', NULL, 'weka.LogitBoost_DecisionStump', '1', 'Weka_3.7.10_9186', NULL, NULL, '2014-04-04 14:40:04', NULL, 'English', 'J. Friedman, T. Hastie, R. Tibshirani (1998). Additive Logistic Regression: a Statistical View of Boosting. Stanford University.', NULL, NULL, 'Weka_3.7.10', NULL, NULL, NULL),
(78, 'moa.NaiveBayes(1)', NULL, 'moa.NaiveBayes', '1', 'Moa_2014.03_1.0', NULL, NULL, '2014-04-04 14:51:46', NULL, 'English', 'Moa implementation of NaiveBayes', NULL, NULL, 'Moa_2014.03', NULL, NULL, NULL),
(79, 'moa.SGD(1)', NULL, 'moa.SGD', '1', 'Moa_2014.03_1.0', NULL, NULL, '2014-04-04 14:51:55', NULL, 'English', 'Moa implementation of SGD', NULL, NULL, 'Moa_2014.03', NULL, NULL, NULL),
(80, 'moa.HoeffdingTree(1)', NULL, 'moa.HoeffdingTree', '1', 'Moa_2014.03_1.0', NULL, NULL, '2014-04-04 14:52:04', NULL, 'English', 'Moa implementation of HoeffdingTree', NULL, NULL, 'Moa_2014.03', NULL, NULL, NULL),
(81, 'moa.kNN(1)', NULL, 'moa.kNN', '1', 'Moa_2014.03_1.0', NULL, NULL, '2014-04-04 14:52:16', NULL, 'English', 'Moa implementation of kNN', NULL, NULL, 'Moa_2014.03', NULL, NULL, NULL),
(82, 'moa.LeveragingBag_kNN(1)', NULL, 'moa.LeveragingBag_kNN', '1', 'Moa_2014.03_1.0', NULL, NULL, '2014-04-04 14:52:35', NULL, 'English', 'Moa implementation of LeveragingBag', NULL, NULL, 'Moa_2014.03', NULL, NULL, NULL),
(83, 'moa.LeveragingBag_HoeffdingTree(1)', NULL, 'moa.LeveragingBag_HoeffdingTree', '1', 'Moa_2014.03_1.0', NULL, NULL, '2014-04-04 14:52:55', NULL, 'English', 'Moa implementation of LeveragingBag', NULL, NULL, 'Moa_2014.03', NULL, NULL, NULL),
(84, 'moa.OzaBag_HoeffdingTree(1)', 1, 'moa.OzaBag_HoeffdingTree', '1', 'Moa_2014.03_1.0', NULL, NULL, '2014-04-23 17:54:40', NULL, 'English', 'Moa implementation of OzaBag', NULL, NULL, 'Moa_2014.03', NULL, 2390, NULL),
(85, 'moa.OzaBagAdwin_HoeffdingTree(1)', 1, 'moa.OzaBagAdwin_HoeffdingTree', '1', 'Moa_2014.03_1.0', NULL, NULL, '2014-04-23 17:54:56', NULL, 'English', 'Moa implementation of OzaBagAdwin', NULL, NULL, 'Moa_2014.03', NULL, 2393, NULL),
(86, 'moa.OzaBoost_HoeffdingTree(1)', 1, 'moa.OzaBoost_HoeffdingTree', '1', 'Moa_2014.03_1.0', NULL, NULL, '2014-04-23 17:55:10', NULL, 'English', 'Moa implementation of OzaBoost', NULL, NULL, 'Moa_2014.03', NULL, 2396, NULL),
(87, 'moa.OzaBoostAdwin_HoeffdingTree(1)', 1, 'moa.OzaBoostAdwin_HoeffdingTree', '1', 'Moa_2014.03_1.0', NULL, NULL, '2014-04-23 17:55:42', NULL, 'English', 'Moa implementation of OzaBoostAdwin', NULL, NULL, 'Moa_2014.03', NULL, 2399, NULL),
(88, 'moa.AMRules(1)', 1, 'moa.AMRules', '1', 'Moa_2014.03_1.0', NULL, NULL, '2014-04-23 17:56:07', NULL, 'English', 'Moa implementation of AMRules', NULL, NULL, 'Moa_2014.03', NULL, 2402, NULL),
(89, 'moa.RandomRules_AMRules(1)', 1, 'moa.RandomRules_AMRules', '1', 'Moa_2014.03_1.0', NULL, NULL, '2014-04-23 17:56:36', NULL, 'English', 'Moa implementation of RandomRules', NULL, NULL, 'Moa_2014.03', NULL, 2405, NULL),
(90, 'moa.Perceptron(1)', 1, 'moa.Perceptron', '1', 'Moa_2014.03_1.0', NULL, NULL, '2014-04-23 17:57:02', NULL, 'English', 'Moa implementation of Perceptron', NULL, NULL, 'Moa_2014.03', NULL, 2408, NULL),
(91, 'moa.RuleClassifier(1)', 1, 'moa.RuleClassifier', '1', 'Moa_2014.03_1.0', NULL, NULL, '2014-04-23 17:57:24', NULL, 'English', 'Moa implementation of RuleClassifier', NULL, NULL, 'Moa_2014.03', NULL, 2411, NULL),
(92, 'moa.ASHoeffdingTree(1)', 1, 'moa.ASHoeffdingTree', '1', 'Moa_2014.03_1.0', NULL, NULL, '2014-04-23 17:57:38', NULL, 'English', 'Moa implementation of ASHoeffdingTree', NULL, NULL, 'Moa_2014.03', NULL, 2414, NULL);
INSERT INTO `implementation` (`id`, `fullName`, `uploader`, `name`, `version`, `external_version`, `creator`, `contributor`, `uploadDate`, `licence`, `language`, `description`, `fullDescription`, `installationNotes`, `dependencies`, `implements`, `binary_file_id`, `source_file_id`) VALUES
(93, 'moa.FIMTDD(1)', 1, 'moa.FIMTDD', '1', 'Moa_2014.03_1.0', NULL, NULL, '2014-04-23 17:57:55', NULL, 'English', 'Moa implementation of FIMTDD', NULL, NULL, 'Moa_2014.03', NULL, 2417, NULL),
(94, 'moa.HoeffdingAdaptiveTree(1)', 1, 'moa.HoeffdingAdaptiveTree', '1', 'Moa_2014.03_1.0', NULL, NULL, '2014-04-23 17:58:14', NULL, 'English', 'Moa implementation of HoeffdingAdaptiveTree', NULL, NULL, 'Moa_2014.03', NULL, 2420, NULL),
(95, 'moa.RandomHoeffdingTree(1)', 1, 'moa.RandomHoeffdingTree', '1', 'Moa_2014.03_1.0', NULL, NULL, '2014-04-23 17:58:28', NULL, 'English', 'Moa implementation of RandomHoeffdingTree', NULL, NULL, 'Moa_2014.03', NULL, 2423, NULL),
(96, 'moa.NoChange(1)', 1, 'moa.NoChange', '1', 'Moa_2014.03_1.0', NULL, NULL, '2014-04-23 17:59:34', NULL, 'English', 'Moa implementation of NoChange', NULL, NULL, 'Moa_2014.03', NULL, 2426, NULL),
(97, 'moa.MajorityClass(1)', 1, 'moa.MajorityClass', '1', 'Moa_2014.03_1.0', NULL, NULL, '2014-04-23 17:59:58', NULL, 'English', 'Moa implementation of MajorityClass', NULL, NULL, 'Moa_2014.03', NULL, 2429, NULL),
(98, 'moa.SPegasos(1)', 1, 'moa.SPegasos', '1', 'Moa_2014.03_1.0', NULL, NULL, '2014-04-23 18:00:11', NULL, 'English', 'Moa implementation of SPegasos', NULL, NULL, 'Moa_2014.03', NULL, 2432, NULL),
(99, 'moa.WEKAClassifier_J48(1)', 1, 'moa.WEKAClassifier_J48', '1', 'Moa_2014.03_1.0', NULL, NULL, '2014-04-23 18:00:36', NULL, 'English', 'Moa implementation of WEKAClassifier', NULL, NULL, 'Moa_2014.03', NULL, 2435, NULL),
(100, 'weka.J48(2)', 1, 'weka.J48', '2', 'Weka_3.7.5_9117', NULL, NULL, '2014-04-23 18:00:36', NULL, 'English', 'Ross Quinlan (1993). C4.5: Programs for Machine Learning. Morgan Kaufmann Publishers, San Mateo, CA.', NULL, NULL, 'Weka_3.7.5', NULL, NULL, NULL),
(101, 'moa.WEKAClassifier_REPTree(1)', 1, 'moa.WEKAClassifier_REPTree', '1', 'Moa_2014.03_1.0', NULL, NULL, '2014-04-23 18:01:01', NULL, 'English', 'Moa implementation of WEKAClassifier', NULL, NULL, 'Moa_2014.03', NULL, 2438, NULL),
(102, 'weka.REPTree(2)', 1, 'weka.REPTree', '2', 'Weka_3.7.5_9378', NULL, NULL, '2014-04-23 18:01:01', NULL, 'English', 'Weka implementation of REPTree', NULL, NULL, 'Weka_3.7.5', NULL, NULL, NULL),
(103, 'moa.WEKAClassifier_OneR(1)', 1, 'moa.WEKAClassifier_OneR', '1', 'Moa_2014.03_1.0', NULL, NULL, '2014-04-23 18:01:17', NULL, 'English', 'Moa implementation of WEKAClassifier', NULL, NULL, 'Moa_2014.03', NULL, 2441, NULL),
(104, 'weka.OneR(2)', 1, 'weka.OneR', '2', 'Weka_3.7.5_9920', NULL, NULL, '2014-04-23 18:01:17', NULL, 'English', 'R.C. Holte (1993). Very simple classification rules perform well on most commonly used datasets. Machine Learning. 11:63-91.', NULL, NULL, 'Weka_3.7.5', NULL, NULL, NULL),
(105, 'moa.WEKAClassifier(1)', 1, 'moa.WEKAClassifier', '1', 'Moa_2014.03_1.0', NULL, NULL, '2014-04-23 18:01:35', NULL, 'English', 'Moa implementation of WEKAClassifier', NULL, NULL, 'Moa_2014.03', NULL, 2444, NULL),
(106, 'moa.WEKAClassifier_LinearRegression(1)', 1, 'moa.WEKAClassifier_LinearRegression', '1', 'Moa_2014.03_1.0', NULL, NULL, '2014-04-23 18:01:58', NULL, 'English', 'Moa implementation of WEKAClassifier', NULL, NULL, 'Moa_2014.03', NULL, 2447, NULL),
(107, 'weka.LinearRegression(1)', 1, 'weka.LinearRegression', '1', 'Weka_3.7.5_9768', NULL, NULL, '2014-04-23 18:01:58', NULL, 'English', 'Weka implementation of LinearRegression', NULL, NULL, 'Weka_3.7.5', NULL, NULL, NULL),
(108, 'moa.WEKAClassifier_SMO_PolyKernel(1)', 1, 'moa.WEKAClassifier_SMO_PolyKernel', '1', 'Moa_2014.03_1.0', NULL, NULL, '2014-04-23 18:02:11', NULL, 'English', 'Moa implementation of WEKAClassifier', NULL, NULL, 'Moa_2014.03', NULL, 2450, NULL),
(109, 'weka.SMO_PolyKernel(2)', 1, 'weka.SMO_PolyKernel', '2', 'Weka_3.7.5_8034', NULL, NULL, '2014-04-23 18:02:11', NULL, 'English', 'J. Platt: Fast Training of Support Vector Machines using Sequential Minimal Optimization. In B. Schoelkopf and C. Burges and A. Smola, editors, Advances in Kernel Methods - Support Vector Learning, 1998.\n\nS.S. Keerthi, S.K. Shevade, C. Bhattacharyya, K.R.K. Murthy (2001). Improvements to Platt''s SMO Algorithm for SVM Classifier Design. Neural Computation. 13(3):637-649.\n\nTrevor Hastie, Robert Tibshirani: Classification by Pairwise Coupling. In: Advances in Neural Information Processing Systems, 1998.', NULL, NULL, 'Weka_3.7.5', NULL, NULL, NULL),
(110, 'weka.PolyKernel(2)', 1, 'weka.PolyKernel', '2', 'Weka_3.7.5_8034', NULL, NULL, '2014-04-23 18:02:11', NULL, 'English', 'Weka implementation of PolyKernel', NULL, NULL, 'Weka_3.7.5', NULL, NULL, NULL);