INSERT INTO `input` (`fullName`, `implementation_id`, `name`, `description`, `dataType`, `defaultValue`, `recommendedRange`) VALUES
('moa.AMRules(1)_A', 88, 'A', 'noAnomalyDetection: Disable anomaly Detection.', 'flag', 'false', NULL),
('moa.AMRules(1)_H', 88, 'H', 'DoNotDetectChanges: Drift Detection. Page-Hinkley.', 'flag', 'false', NULL),
('moa.AMRules(1)_O', 88, 'O', 'setOrderedRulesOn: orderedRules.', 'flag', 'false', NULL),
('moa.AMRules(1)_P', 88, 'P', 'predictionFunctionOption: The prediction function to use.', 'option', 'Adaptative', NULL),
('moa.AMRules(1)_a', 88, 'a', 'pageHinckleyAlpha: The alpha value to use in the Page Hinckley change detection tests.', 'option', '0.5', NULL),
('moa.AMRules(1)_c', 88, 'c', 'splitConfidence: Hoeffding Bound Parameter. The allowable error in split decision, values closer to 0 will take longer to decide.', 'option', '1.0E-7', NULL),
('moa.AMRules(1)_d', 88, 'd', 'learningRatio_Decay_set_constant: Learning Ratio Decay in Perceptron set to be constant. (The next parameter).', 'flag', 'false', NULL),
('moa.AMRules(1)_g', 88, 'g', 'gracePeriod: Hoeffding Bound Parameter. The number of instances a leaf should observe between split attempts.', 'option', '200', NULL),
('moa.AMRules(1)_l', 88, 'l', 'pageHinckleyThreshold: The threshold value (Lambda) to be used in the Page Hinckley change detection tests.', 'option', '50', NULL),
('moa.AMRules(1)_m', 88, 'm', 'multivariateAnomalyProbabilityThresholdd: Multivariate anomaly threshold value.', 'option', '0.99', NULL),
('moa.AMRules(1)_n', 88, 'n', 'anomalyThreshold: The threshold value of anomalies to be used in the anomaly detection.', 'option', '30', NULL),
('moa.AMRules(1)_s', 88, 's', 'learningRatio: Constante Learning Ratio to use for training the Perceptrons in the leaves.', 'option', '0.01', NULL),
('moa.AMRules(1)_t', 88, 't', 'tieThreshold: Hoeffding Bound Parameter. Threshold below which a split will be forced to break ties.', 'option', '0.05', NULL),
('moa.AMRules(1)_u', 88, 'u', 'univariateAnomalyprobabilityThreshold: Univariate anomaly threshold value.', 'option', '0.1', NULL),
('moa.AMRules(1)_v', 88, 'v', 'verbosity: Output Verbosity Control Level. 1 (Less) to 4 (More)', 'option', '1', NULL),
('moa.ASHoeffdingTree(1)_b', 92, 'b', 'binarySplits: Only allow binary splits.', 'flag', 'false', NULL),
('moa.ASHoeffdingTree(1)_c', 92, 'c', 'splitConfidence: The allowable error in split decision, values closer to 0 will take longer to decide.', 'option', '1.0E-7', NULL),
('moa.ASHoeffdingTree(1)_d', 92, 'd', 'nominalEstimator: Nominal estimator to use.', 'baselearner', 'NominalAttributeClassObserver', NULL),
('moa.ASHoeffdingTree(1)_e', 92, 'e', 'memoryEstimatePeriod: How many instances between memory consumption checks.', 'option', '1000000', NULL),
('moa.ASHoeffdingTree(1)_g', 92, 'g', 'gracePeriod: The number of instances a leaf should observe between split attempts.', 'option', '200', NULL),
('moa.ASHoeffdingTree(1)_l', 92, 'l', 'leafprediction: Leaf prediction to use.', 'option', 'NBAdaptive', NULL),
('moa.ASHoeffdingTree(1)_m', 92, 'm', 'maxByteSize: Maximum memory consumed by the tree.', 'option', '33554432', NULL),
('moa.ASHoeffdingTree(1)_n', 92, 'n', 'numericEstimator: Numeric estimator to use.', 'baselearner', 'GaussianNumericAttributeClassObserver', NULL),
('moa.ASHoeffdingTree(1)_p', 92, 'p', 'noPrePrune: Disable pre-pruning.', 'flag', 'false', NULL),
('moa.ASHoeffdingTree(1)_q', 92, 'q', 'nbThreshold: The number of instances a leaf should observe before permitting Naive Bayes.', 'option', '0', NULL),
('moa.ASHoeffdingTree(1)_r', 92, 'r', 'removePoorAtts: Disable poor attributes.', 'flag', 'false', NULL),
('moa.ASHoeffdingTree(1)_s', 92, 's', 'splitCriterion: Split criterion to use.', 'baselearner', 'InfoGainSplitCriterion', NULL),
('moa.ASHoeffdingTree(1)_t', 92, 't', 'tieThreshold: Threshold below which a split will be forced to break ties.', 'option', '0.05', NULL),
('moa.ASHoeffdingTree(1)_z', 92, 'z', 'stopMemManagement: Stop growing as soon as memory limit is hit.', 'flag', 'false', NULL),
('moa.FIMTDD(1)_a', 93, 'a', 'PageHinckleyAlpha: The alpha value to use in the Page Hinckley change detection tests.', 'option', '0.005', NULL),
('moa.FIMTDD(1)_b', 93, 'b', 'binarySplits: Only allow binary splits.', 'flag', 'false', NULL),
('moa.FIMTDD(1)_c', 93, 'c', 'splitConfidence: The allowable error in split decision, values closer to 0 will take longer to decide.', 'option', '1.0E-7', NULL),
('moa.FIMTDD(1)_d', 93, 'd', 'nominalEstimator: Nominal estimator to use.', 'baselearner', 'NominalAttributeClassObserver', NULL),
('moa.FIMTDD(1)_e', 93, 'e', 'memoryEstimatePeriod: How many instances between memory consumption checks.', 'option', '1000000', NULL),
('moa.FIMTDD(1)_f', 93, 'f', 'AlternateTreeFadingFactor: The fading factor to use when deciding if an alternate tree should replace an original.', 'option', '0.995', NULL),
('moa.FIMTDD(1)_g', 93, 'g', 'gracePeriod: The number of instances a leaf should observe between split attempts.', 'option', '200', NULL),
('moa.FIMTDD(1)_h', 93, 'h', 'PageHinckleyThreshold: The threshold value to be used in the Page Hinckley change detection tests.', 'option', '50', NULL),
('moa.FIMTDD(1)_j', 93, 'j', 'learningRatio_Decay_or_Const: learning Ratio Decay or const parameter.', 'flag', 'false', NULL),
('moa.FIMTDD(1)_l', 93, 'l', 'leafprediction: Leaf prediction to use.', 'option', 'NBAdaptive', NULL),
('moa.FIMTDD(1)_m', 93, 'm', 'maxByteSize: Maximum memory consumed by the tree.', 'option', '33554432', NULL),
('moa.FIMTDD(1)_n', 93, 'n', 'numericEstimator: Numeric estimator to use.', 'baselearner', 'FIMTDDNumericAttributeClassObserver', NULL),
('moa.FIMTDD(1)_p', 93, 'p', 'noPrePrune: Disable pre-pruning.', 'flag', 'false', NULL),
('moa.FIMTDD(1)_q', 93, 'q', 'nbThreshold: The number of instances a leaf should observe before permitting Naive Bayes.', 'option', '0', NULL),
('moa.FIMTDD(1)_r', 93, 'r', 'removePoorAtts: Disable poor attributes.', 'flag', 'false', NULL),
('moa.FIMTDD(1)_s', 93, 's', 'splitCriterion: Split criterion to use.', 'baselearner', 'SDRSplitCriterion', NULL),
('moa.FIMTDD(1)_t', 93, 't', 'tieThreshold: Threshold below which a split will be forced to break ties.', 'option', '0.05', NULL),
('moa.FIMTDD(1)_u', 93, 'u', 'AlternateTreeTime: The ''time'' (in terms of number of instances) value to use when deciding if an alternate tree should be discarded.', 'option', '1500', NULL),
('moa.FIMTDD(1)_w', 93, 'w', 'learningRatio: Learning ratio to use for training the Perceptrons in the leaves.', 'option', '0.01', NULL),
('moa.FIMTDD(1)_y', 93, 'y', 'AlternateTreeTMin: The Tmin value to use when deciding if an alternate tree should replace an original.', 'option', '150', NULL),
('moa.FIMTDD(1)_z', 93, 'z', 'stopMemManagement: Stop growing as soon as memory limit is hit.', 'flag', 'false', NULL),
('moa.HoeffdingAdaptiveTree(1)_b', 94, 'b', 'binarySplits: Only allow binary splits.', 'flag', 'false', NULL),
('moa.HoeffdingAdaptiveTree(1)_c', 94, 'c', 'splitConfidence: The allowable error in split decision, values closer to 0 will take longer to decide.', 'option', '1.0E-7', NULL),
('moa.HoeffdingAdaptiveTree(1)_d', 94, 'd', 'nominalEstimator: Nominal estimator to use.', 'baselearner', 'NominalAttributeClassObserver', NULL),
('moa.HoeffdingAdaptiveTree(1)_e', 94, 'e', 'memoryEstimatePeriod: How many instances between memory consumption checks.', 'option', '1000000', NULL),
('moa.HoeffdingAdaptiveTree(1)_g', 94, 'g', 'gracePeriod: The number of instances a leaf should observe between split attempts.', 'option', '200', NULL),
('moa.HoeffdingAdaptiveTree(1)_l', 94, 'l', 'leafprediction: Leaf prediction to use.', 'option', 'NBAdaptive', NULL),
('moa.HoeffdingAdaptiveTree(1)_m', 94, 'm', 'maxByteSize: Maximum memory consumed by the tree.', 'option', '33554432', NULL),
('moa.HoeffdingAdaptiveTree(1)_n', 94, 'n', 'numericEstimator: Numeric estimator to use.', 'baselearner', 'GaussianNumericAttributeClassObserver', NULL),
('moa.HoeffdingAdaptiveTree(1)_p', 94, 'p', 'noPrePrune: Disable pre-pruning.', 'flag', 'false', NULL),
('moa.HoeffdingAdaptiveTree(1)_q', 94, 'q', 'nbThreshold: The number of instances a leaf should observe before permitting Naive Bayes.', 'option', '0', NULL),
('moa.HoeffdingAdaptiveTree(1)_r', 94, 'r', 'removePoorAtts: Disable poor attributes.', 'flag', 'false', NULL),
('moa.HoeffdingAdaptiveTree(1)_s', 94, 's', 'splitCriterion: Split criterion to use.', 'baselearner', 'InfoGainSplitCriterion', NULL),
('moa.HoeffdingAdaptiveTree(1)_t', 94, 't', 'tieThreshold: Threshold below which a split will be forced to break ties.', 'option', '0.05', NULL),
('moa.HoeffdingAdaptiveTree(1)_z', 94, 'z', 'stopMemManagement: Stop growing as soon as memory limit is hit.', 'flag', 'false', NULL),
('moa.HoeffdingTree(1)_b', 80, 'b', 'binarySplits: Only allow binary splits.', 'flag', 'false', NULL),
('moa.HoeffdingTree(1)_c', 80, 'c', 'splitConfidence: The allowable error in split decision, values closer to 0 will take longer to decide.', 'option', '1.0E-7', NULL),
('moa.HoeffdingTree(1)_d', 80, 'd', 'nominalEstimator: Nominal estimator to use.', 'baselearner', 'NominalAttributeClassObserver', NULL),
('moa.HoeffdingTree(1)_e', 80, 'e', 'memoryEstimatePeriod: How many instances between memory consumption checks.', 'option', '1000000', NULL),
('moa.HoeffdingTree(1)_g', 80, 'g', 'gracePeriod: The number of instances a leaf should observe between split attempts.', 'option', '200', NULL),
('moa.HoeffdingTree(1)_l', 80, 'l', 'leafprediction: Leaf prediction to use.', 'option', 'NBAdaptive', NULL),
('moa.HoeffdingTree(1)_m', 80, 'm', 'maxByteSize: Maximum memory consumed by the tree.', 'option', '33554432', NULL),
('moa.HoeffdingTree(1)_n', 80, 'n', 'numericEstimator: Numeric estimator to use.', 'baselearner', 'GaussianNumericAttributeClassObserver', NULL),
('moa.HoeffdingTree(1)_p', 80, 'p', 'noPrePrune: Disable pre-pruning.', 'flag', 'false', NULL),
('moa.HoeffdingTree(1)_q', 80, 'q', 'nbThreshold: The number of instances a leaf should observe before permitting Naive Bayes.', 'option', '0', NULL),
('moa.HoeffdingTree(1)_r', 80, 'r', 'removePoorAtts: Disable poor attributes.', 'flag', 'false', NULL),
('moa.HoeffdingTree(1)_s', 80, 's', 'splitCriterion: Split criterion to use.', 'baselearner', 'InfoGainSplitCriterion', NULL),
('moa.HoeffdingTree(1)_t', 80, 't', 'tieThreshold: Threshold below which a split will be forced to break ties.', 'option', '0.05', NULL),
('moa.HoeffdingTree(1)_z', 80, 'z', 'stopMemManagement: Stop growing as soon as memory limit is hit.', 'flag', 'false', NULL),
('moa.LeveragingBag_HoeffdingTree(1)_a', 83, 'a', 'deltaAdwin: Delta of Adwin change detection', 'option', '0.002', NULL),
('moa.LeveragingBag_HoeffdingTree(1)_l', 83, 'l', 'baseLearner: Classifier to train.', 'baselearner', 'trees.HoeffdingTree', NULL),
('moa.LeveragingBag_HoeffdingTree(1)_m', 83, 'm', 'leveraginBagAlgorithm: Leveraging Bagging to use.', 'option', 'LeveragingBag', NULL),
('moa.LeveragingBag_HoeffdingTree(1)_o', 83, 'o', 'outputCodes: Use Output Codes to use binary classifiers.', 'flag', 'false', NULL),
('moa.LeveragingBag_HoeffdingTree(1)_r', 83, 'r', 'randomSeed: Seed for random behaviour of the classifier.', 'option', '1', NULL),
('moa.LeveragingBag_HoeffdingTree(1)_s', 83, 's', 'ensembleSize: The number of models in the bag.', 'option', '10', NULL),
('moa.LeveragingBag_HoeffdingTree(1)_w', 83, 'w', 'weightShrink: The number to use to compute the weight of new instances.', 'option', '6.0', NULL),
('moa.LeveragingBag_kNN(1)_a', 82, 'a', 'deltaAdwin: Delta of Adwin change detection', 'option', '0.002', NULL),
('moa.LeveragingBag_kNN(1)_l', 82, 'l', 'baseLearner: Classifier to train.', 'baselearner', 'trees.HoeffdingTree', NULL),
('moa.LeveragingBag_kNN(1)_m', 82, 'm', 'leveraginBagAlgorithm: Leveraging Bagging to use.', 'option', 'LeveragingBag', NULL),
('moa.LeveragingBag_kNN(1)_o', 82, 'o', 'outputCodes: Use Output Codes to use binary classifiers.', 'flag', 'false', NULL),
('moa.LeveragingBag_kNN(1)_r', 82, 'r', 'randomSeed: Seed for random behaviour of the classifier.', 'option', '1', NULL),
('moa.LeveragingBag_kNN(1)_s', 82, 's', 'ensembleSize: The number of models in the bag.', 'option', '10', NULL),
('moa.LeveragingBag_kNN(1)_w', 82, 'w', 'weightShrink: The number to use to compute the weight of new instances.', 'option', '6.0', NULL),
('moa.OzaBagAdwin_HoeffdingTree(1)_l', 85, 'l', 'baseLearner: Classifier to train.', 'baselearner', 'trees.HoeffdingTree', NULL),
('moa.OzaBagAdwin_HoeffdingTree(1)_r', 85, 'r', 'randomSeed: Seed for random behaviour of the classifier.', 'option', '1', NULL),
('moa.OzaBagAdwin_HoeffdingTree(1)_s', 85, 's', 'ensembleSize: The number of models in the bag.', 'option', '10', NULL),
('moa.OzaBag_HoeffdingTree(1)_l', 84, 'l', 'baseLearner: Classifier to train.', 'baselearner', 'trees.HoeffdingTree', NULL),
('moa.OzaBag_HoeffdingTree(1)_r', 84, 'r', 'randomSeed: Seed for random behaviour of the classifier.', 'option', '1', NULL),
('moa.OzaBag_HoeffdingTree(1)_s', 84, 's', 'ensembleSize: The number of models in the bag.', 'option', '10', NULL),
('moa.OzaBoostAdwin_HoeffdingTree(1)_a', 87, 'a', 'deltaAdwin: Delta of Adwin change detection', 'option', '0.002', NULL),
('moa.OzaBoostAdwin_HoeffdingTree(1)_e', 87, 'e', 'same: Use Samme Algorithm.', 'flag', 'false', NULL),
('moa.OzaBoostAdwin_HoeffdingTree(1)_l', 87, 'l', 'baseLearner: Classifier to train.', 'baselearner', 'trees.HoeffdingTree', NULL),
('moa.OzaBoostAdwin_HoeffdingTree(1)_o', 87, 'o', 'outputCodes: Use Output Codes to use binary classifiers.', 'flag', 'false', NULL),
('moa.OzaBoostAdwin_HoeffdingTree(1)_p', 87, 'p', 'pureBoost: Boost with weights only; no poisson.', 'flag', 'false', NULL),
('moa.OzaBoostAdwin_HoeffdingTree(1)_r', 87, 'r', 'randomSeed: Seed for random behaviour of the classifier.', 'option', '1', NULL),
('moa.OzaBoostAdwin_HoeffdingTree(1)_s', 87, 's', 'ensembleSize: The number of models to boost.', 'option', '10', NULL),
('moa.OzaBoost_HoeffdingTree(1)_l', 86, 'l', 'baseLearner: Classifier to train.', 'baselearner', 'trees.HoeffdingTree', NULL),
('moa.OzaBoost_HoeffdingTree(1)_p', 86, 'p', 'pureBoost: Boost with weights only; no poisson.', 'flag', 'false', NULL),
('moa.OzaBoost_HoeffdingTree(1)_r', 86, 'r', 'randomSeed: Seed for random behaviour of the classifier.', 'option', '1', NULL),
('moa.OzaBoost_HoeffdingTree(1)_s', 86, 's', 'ensembleSize: The number of models to boost.', 'option', '10', NULL),
('moa.Perceptron(1)_d', 90, 'd', 'learningRatio_Decay_set_constant: Learning Ratio Decay in Perceptron set to be constant. (The next parameter).', 'flag', 'false', NULL),
('moa.Perceptron(1)_l', 90, 'l', 'learningRatio: Constante Learning Ratio to use for training the Perceptrons in the leaves.', 'option', '0.01', NULL),
('moa.Perceptron(1)_r', 90, 'r', 'randomSeed: Seed for random behaviour of the classifier.', 'option', '1', NULL),
('moa.RandomHoeffdingTree(1)_b', 95, 'b', 'binarySplits: Only allow binary splits.', 'flag', 'false', NULL),
('moa.RandomHoeffdingTree(1)_c', 95, 'c', 'splitConfidence: The allowable error in split decision, values closer to 0 will take longer to decide.', 'option', '1.0E-7', NULL),
('moa.RandomHoeffdingTree(1)_d', 95, 'd', 'nominalEstimator: Nominal estimator to use.', 'baselearner', 'NominalAttributeClassObserver', NULL),
('moa.RandomHoeffdingTree(1)_e', 95, 'e', 'memoryEstimatePeriod: How many instances between memory consumption checks.', 'option', '1000000', NULL),
('moa.RandomHoeffdingTree(1)_g', 95, 'g', 'gracePeriod: The number of instances a leaf should observe between split attempts.', 'option', '200', NULL),
('moa.RandomHoeffdingTree(1)_l', 95, 'l', 'leafprediction: Leaf prediction to use.', 'option', 'NBAdaptive', NULL),
('moa.RandomHoeffdingTree(1)_m', 95, 'm', 'maxByteSize: Maximum memory consumed by the tree.', 'option', '33554432', NULL),
('moa.RandomHoeffdingTree(1)_n', 95, 'n', 'numericEstimator: Numeric estimator to use.', 'baselearner', 'GaussianNumericAttributeClassObserver', NULL),
('moa.RandomHoeffdingTree(1)_p', 95, 'p', 'noPrePrune: Disable pre-pruning.', 'flag', 'false', NULL),
('moa.RandomHoeffdingTree(1)_q', 95, 'q', 'nbThreshold: The number of instances a leaf should observe before permitting Naive Bayes.', 'option', '0', NULL),
('moa.RandomHoeffdingTree(1)_r', 95, 'r', 'randomSeed: Seed for random behaviour of the classifier.', 'option', '1', NULL),
('moa.RandomHoeffdingTree(1)_s', 95, 's', 'splitCriterion: Split criterion to use.', 'baselearner', 'InfoGainSplitCriterion', NULL),
('moa.RandomHoeffdingTree(1)_t', 95, 't', 'tieThreshold: Threshold below which a split will be forced to break ties.', 'option', '0.05', NULL),
('moa.RandomHoeffdingTree(1)_z', 95, 'z', 'stopMemManagement: Stop growing as soon as memory limit is hit.', 'flag', 'false', NULL),
('moa.RandomRules_AMRules(1)_l', 89, 'l', 'baseLearner: Classifier to train.', 'baselearner', 'rules.AMRules', NULL),
('moa.RandomRules_AMRules(1)_n', 89, 'n', 'numAttributesPercentage: The number of attributes to use per model.', 'option', '63.2', NULL),
('moa.RandomRules_AMRules(1)_p', 89, 'p', 'useBagging: Use Bagging.', 'flag', 'false', NULL),
('moa.RandomRules_AMRules(1)_r', 89, 'r', 'randomSeed: Seed for random behaviour of the classifier.', 'option', '1', NULL),
('moa.RandomRules_AMRules(1)_s', 89, 's', 'ensembleSize: The number of models in the bag.', 'option', '10', NULL),
('moa.RuleClassifier(1)_c', 91, 'c', 'splitConfidence: The allowable error in split decision, values closer to 0 will take longer to decide.', 'option', '1.0E-6', NULL),
('moa.RuleClassifier(1)_g', 91, 'g', 'gracePeriod: The number of instances a leaf should observe between split attempts.', 'option', '200', NULL),
('moa.RuleClassifier(1)_i', 91, 'i', 'anomalyThreshold: The threshold value to be used in the anomaly detection.', 'option', '15', NULL),
('moa.RuleClassifier(1)_k', 91, 'k', 'probabilityThreshold: The threshold value.', 'option', '0.1', NULL),
('moa.RuleClassifier(1)_o', 91, 'o', 'anomalyprobabilityThreshold: The threshold value.', 'option', '0.99', NULL),
('moa.RuleClassifier(1)_p', 91, 'p', 'Pmin: Percentage of the total number of example seen in the node.', 'option', '0.1', NULL),
('moa.RuleClassifier(1)_r', 91, 'r', 'orderedRules: orderedRules.', 'flag', 'false', NULL),
('moa.RuleClassifier(1)_t', 91, 't', 'tieThreshold: Threshold below which a split will be forced to break ties.', 'option', '0.05', NULL),
('moa.RuleClassifier(1)_u', 91, 'u', 'anomalyDetection: anomaly Detection.', 'flag', 'false', NULL),
('moa.RuleClassifier(1)_z', 91, 'z', 'predictionFunctionOption: The prediction function to use.', 'option', 'firstHit', NULL),
('moa.SGD(1)_l', 79, 'l', 'lambdaRegularization: Lambda regularization parameter .', 'option', '1.0E-4', NULL),
('moa.SGD(1)_o', 79, 'o', 'lossFunction: The loss function to use.', 'option', 'HINGE', NULL),
('moa.SGD(1)_r', 79, 'r', 'learningRate: Learning rate parameter.', 'option', '1.0E-4', NULL),
('moa.SPegasos(1)_l', 98, 'l', 'lambdaRegularization: Lambda regularization parameter .', 'option', '1.0E-4', NULL),
('moa.SPegasos(1)_o', 98, 'o', 'lossFunction: The loss function to use.', 'option', 'HINGE', NULL),
('moa.WEKAClassifier(1)_f', 105, 'f', 'sampleFrequency: How many instances between samples of the learning performance.', 'option', '0', NULL),
('moa.WEKAClassifier(1)_i', 105, 'i', 'widthInit: Size of first Window for training learner.', 'option', '1000', NULL),
('moa.WEKAClassifier(1)_l', 105, 'l', 'baseLearner: Classifier to train.', 'baselearner', 'weka.classifiers.bayes.NaiveBayesUpdateable', NULL),
('moa.WEKAClassifier(1)_w', 105, 'w', 'width: Size of Window for training learner.', 'option', '0', NULL),
('moa.WEKAClassifier_J48(1)_f', 99, 'f', 'sampleFrequency: How many instances between samples of the learning performance.', 'option', '0', NULL),
('moa.WEKAClassifier_J48(1)_i', 99, 'i', 'widthInit: Size of first Window for training learner.', 'option', '1000', NULL),
('moa.WEKAClassifier_J48(1)_l', 99, 'l', 'baseLearner: Classifier to train.', 'baselearner', 'weka.classifiers.bayes.NaiveBayesUpdateable', NULL),
('moa.WEKAClassifier_J48(1)_w', 99, 'w', 'width: Size of Window for training learner.', 'option', '0', NULL),
('moa.WEKAClassifier_LinearRegression(1)_f', 106, 'f', 'sampleFrequency: How many instances between samples of the learning performance.', 'option', '0', NULL),
('moa.WEKAClassifier_LinearRegression(1)_i', 106, 'i', 'widthInit: Size of first Window for training learner.', 'option', '1000', NULL),
('moa.WEKAClassifier_LinearRegression(1)_l', 106, 'l', 'baseLearner: Classifier to train.', 'baselearner', 'weka.classifiers.bayes.NaiveBayesUpdateable', NULL),
('moa.WEKAClassifier_LinearRegression(1)_w', 106, 'w', 'width: Size of Window for training learner.', 'option', '0', NULL),
('moa.WEKAClassifier_OneR(1)_f', 103, 'f', 'sampleFrequency: How many instances between samples of the learning performance.', 'option', '0', NULL),
('moa.WEKAClassifier_OneR(1)_i', 103, 'i', 'widthInit: Size of first Window for training learner.', 'option', '1000', NULL),
('moa.WEKAClassifier_OneR(1)_l', 103, 'l', 'baseLearner: Classifier to train.', 'baselearner', 'weka.classifiers.bayes.NaiveBayesUpdateable', NULL),
('moa.WEKAClassifier_OneR(1)_w', 103, 'w', 'width: Size of Window for training learner.', 'option', '0', NULL),
('moa.WEKAClassifier_REPTree(1)_f', 101, 'f', 'sampleFrequency: How many instances between samples of the learning performance.', 'option', '0', NULL),
('moa.WEKAClassifier_REPTree(1)_i', 101, 'i', 'widthInit: Size of first Window for training learner.', 'option', '1000', NULL),
('moa.WEKAClassifier_REPTree(1)_l', 101, 'l', 'baseLearner: Classifier to train.', 'baselearner', 'weka.classifiers.bayes.NaiveBayesUpdateable', NULL),
('moa.WEKAClassifier_REPTree(1)_w', 101, 'w', 'width: Size of Window for training learner.', 'option', '0', NULL),
('moa.WEKAClassifier_SMO_PolyKernel(1)_f', 108, 'f', 'sampleFrequency: How many instances between samples of the learning performance.', 'option', '0', NULL),
('moa.WEKAClassifier_SMO_PolyKernel(1)_i', 108, 'i', 'widthInit: Size of first Window for training learner.', 'option', '1000', NULL),
('moa.WEKAClassifier_SMO_PolyKernel(1)_l', 108, 'l', 'baseLearner: Classifier to train.', 'baselearner', 'weka.classifiers.bayes.NaiveBayesUpdateable', NULL),
('moa.WEKAClassifier_SMO_PolyKernel(1)_w', 108, 'w', 'width: Size of Window for training learner.', 'option', '0', NULL),
('moa.kNN(1)_k', 81, 'k', 'k: The number of neighbors', 'option', '10', NULL),
('moa.kNN(1)_n', 81, 'n', 'nearestNeighbourSearch: Nearest Neighbour Search to use', 'option', 'LinearNN', NULL),
('moa.kNN(1)_w', 81, 'w', 'limit: The maximum number of instances to store', 'option', '1000', NULL),
('weka.AdaBoostM1_DecisionStump(1)_D', 75, 'D', 'If set, classifier is run in debug mode and\n	may output additional info to the console', 'flag', '', NULL),
('weka.AdaBoostM1_DecisionStump(1)_I', 75, 'I', 'Number of iterations.\n	(default 10)', 'option', '10', NULL),
('weka.AdaBoostM1_DecisionStump(1)_P', 75, 'P', 'Percentage of weight mass to base training on.\n	(default 100, reduce to around 90 speed up)', 'option', '100', NULL),
('weka.AdaBoostM1_DecisionStump(1)_Q', 75, 'Q', 'Use resampling for boosting.', 'flag', '', NULL),
('weka.AdaBoostM1_DecisionStump(1)_S', 75, 'S', 'Random number seed.\n	(default 1)', 'option', '1', NULL),
('weka.AdaBoostM1_DecisionStump(1)_W', 75, 'W', 'Full name of base classifier.\n	(default: weka.classifiers.trees.DecisionStump)', 'baselearner', 'weka.classifiers.trees.DecisionStump', NULL),
('weka.Bagging_REPTree(1)_D', 76, 'D', 'If set, classifier is run in debug mode and\n	may output additional info to the console', 'flag', '', NULL),
('weka.Bagging_REPTree(1)_I', 76, 'I', 'Number of iterations.\n	(default 10)', 'option', '10', NULL),
('weka.Bagging_REPTree(1)_L', 76, 'L', 'Maximum tree depth (default -1, no maximum)', 'option', '', NULL),
('weka.Bagging_REPTree(1)_M', 76, 'M', 'Set minimum number of instances per leaf (default 2).', 'option', '', NULL),
('weka.Bagging_REPTree(1)_N', 76, 'N', 'Number of folds for reduced error pruning (default 3).', 'option', '', NULL),
('weka.Bagging_REPTree(1)_O', 76, 'O', 'Calculate the out of bag error.', 'flag', '', NULL),
('weka.Bagging_REPTree(1)_P', 76, 'P', 'Size of each bag, as a percentage of the\n	training set size. (default 100)', 'option', '100', NULL),
('weka.Bagging_REPTree(1)_R', 76, 'R', 'Spread initial count over all class values (i.e. don''t use 1 per value)', 'flag', '', NULL),
('weka.Bagging_REPTree(1)_S', 76, 'S', 'Random number seed.\n	(default 1)', 'option', '1', NULL),
('weka.Bagging_REPTree(1)_V', 76, 'V', 'Set minimum numeric class variance proportion\n	of train variance for split (default 1e-3).', 'option', '', NULL),
('weka.Bagging_REPTree(1)_W', 76, 'W', 'Full name of base classifier.\n	(default: weka.classifiers.trees.REPTree)', 'baselearner', 'weka.classifiers.trees.REPTree', NULL),
('weka.Bagging_REPTree(1)_num-slots', 76, 'num-slots', 'Number of execution slots.\n	(default 1 - i.e. no parallelism)', 'option', '1', NULL),
('weka.BayesNet_K2(1)_B', 67, 'B', 'BIF file to compare with', 'option', '', NULL),
('weka.BayesNet_K2(1)_D', 67, 'D', 'Do not use ADTree data structure', 'flag', 'true', NULL),
('weka.BayesNet_K2(1)_E', 67, 'E', 'Estimator algorithm', 'option', '', NULL),
('weka.BayesNet_K2(1)_Q', 67, 'Q', 'Search algorithm', 'baselearner', 'weka.classifiers.bayes.net.search.local.K2', NULL),
('weka.DecisionStump(1)_D', 62, 'D', 'If set, classifier is run in debug mode and\n	may output additional info to the console', 'flag', '', NULL),
('weka.HoeffdingTree(1)_E', 63, 'E', 'The allowable error in a split decision - values closer to zero will take longer to decide\n	(default = 1e-7)', 'option', '1.0E-7', NULL),
('weka.HoeffdingTree(1)_G', 63, 'G', 'Grace period - the number of instances a leaf should observe between split attempts\n	(default = 200)', 'option', '200.0', NULL),
('weka.HoeffdingTree(1)_H', 63, 'H', 'Threshold below which a split will be forced to break ties\n	(default = 0.05)', 'option', '0.05', NULL),
('weka.HoeffdingTree(1)_L', 63, 'L', 'The leaf prediction strategy to use. 0 = majority class, 1 = naive Bayes, 2 = naive Bayes adaptive.\n	(default = 2)', 'option', '2', NULL),
('weka.HoeffdingTree(1)_M', 63, 'M', 'Minimum fraction of weight required down at least two branches for info gain splitting\n	(default = 0.01)', 'option', '0.01', NULL),
('weka.HoeffdingTree(1)_N', 63, 'N', 'The number of instances (weight) a leaf should observe before allowing naive Bayes to make predictions (NB or NB adaptive only)\n	(default = 0)', 'option', '0.0', NULL),
('weka.HoeffdingTree(1)_P', 63, 'P', 'Print leaf models when using naive Bayes at the leaves.', 'flag', '', NULL),
('weka.HoeffdingTree(1)_S', 63, 'S', 'The splitting criterion to use. 0 = Gini, 1 = Info gain\n	(default = 1)', 'option', '1', NULL),
('weka.IBk(1)_A', 66, 'A', 'The nearest neighbour search algorithm to use (default: weka.core.neighboursearch.LinearNNSearch).', 'flag', 'true', NULL),
('weka.IBk(1)_E', 66, 'E', 'Minimise mean squared error rather than mean absolute\n	error when using -X option with numeric prediction.', 'flag', '', NULL),
('weka.IBk(1)_F', 66, 'F', 'Weight neighbours by 1 - their distance\n	(use when k > 1)', 'flag', '', NULL),
('weka.IBk(1)_I', 66, 'I', 'Weight neighbours by the inverse of their distance\n	(use when k > 1)', 'flag', '', NULL),
('weka.IBk(1)_K', 66, 'K', 'Number of nearest neighbours (k) used in classification.\n	(Default = 1)', 'option', '1', NULL),
('weka.IBk(1)_W', 66, 'W', 'Maximum number of training instances maintained.\n	Training instances are dropped FIFO. (Default = no window)', 'option', '0', NULL),
('weka.IBk(1)_X', 66, 'X', 'Select the number of nearest neighbours between 1\n	and the k value specified using hold-one-out evaluation\n	on the training data (use when k > 1)', 'flag', '', NULL),
('weka.J48(1)_A', 60, 'A', 'Laplace smoothing for predicted probabilities.', 'flag', '', NULL),
('weka.J48(1)_B', 60, 'B', 'Use binary splits only.', 'flag', '', NULL),
('weka.J48(1)_C', 60, 'C', 'Set confidence threshold for pruning.\n	(default 0.25)', 'option', '0.25', NULL),
('weka.J48(1)_J', 60, 'J', 'Do not use MDL correction for info gain on numeric attributes.', 'flag', '', NULL),
('weka.J48(1)_L', 60, 'L', 'Do not clean up after the tree has been built.', 'flag', '', NULL),
('weka.J48(1)_M', 60, 'M', 'Set minimum number of instances per leaf.\n	(default 2)', 'option', '2', NULL),
('weka.J48(1)_N', 60, 'N', 'Set number of folds for reduced error\n	pruning. One fold is used as pruning set.\n	(default 3)', 'option', '', NULL),
('weka.J48(1)_O', 60, 'O', 'Do not collapse tree.', 'flag', '', NULL),
('weka.J48(1)_Q', 60, 'Q', 'Seed for random data shuffling (default 1).', 'option', '', NULL),
('weka.J48(1)_R', 60, 'R', 'Use reduced error pruning.', 'flag', '', NULL),
('weka.J48(1)_S', 60, 'S', 'Don''t perform subtree raising.', 'flag', '', NULL),
('weka.J48(1)_U', 60, 'U', 'Use unpruned tree.', 'flag', '', NULL),
('weka.J48(2)_A', 100, 'A', 'Laplace smoothing for predicted probabilities.', 'flag', '', NULL),
('weka.J48(2)_B', 100, 'B', 'Use binary splits only.', 'flag', '', NULL),
('weka.J48(2)_C', 100, 'C', 'Set confidence threshold for pruning.\n	(default 0.25)', 'option', '0.25', NULL),
('weka.J48(2)_J', 100, 'J', 'Do not use MDL correction for info gain on numeric attributes.', 'flag', '', NULL),
('weka.J48(2)_L', 100, 'L', 'Do not clean up after the tree has been built.', 'flag', '', NULL),
('weka.J48(2)_M', 100, 'M', 'Set minimum number of instances per leaf.\n	(default 2)', 'option', '2', NULL),
('weka.J48(2)_N', 100, 'N', 'Set number of folds for reduced error\n	pruning. One fold is used as pruning set.\n	(default 3)', 'option', '', NULL),
('weka.J48(2)_O', 100, 'O', 'Do not collapse tree.', 'flag', '', NULL),
('weka.J48(2)_Q', 100, 'Q', 'Seed for random data shuffling (default 1).', 'option', '', NULL),
('weka.J48(2)_R', 100, 'R', 'Use reduced error pruning.', 'flag', '', NULL),
('weka.J48(2)_S', 100, 'S', 'Don''t perform subtree raising.', 'flag', '', NULL),
('weka.J48(2)_U', 100, 'U', 'Use unpruned tree.', 'flag', '', NULL),
('weka.JRip(1)_D', 59, 'D', 'Set whether turn on the\n	debug mode (Default: false)', 'flag', '', NULL),
('weka.JRip(1)_E', 59, 'E', 'Whether NOT check the error rate>=0.5\n	in stopping criteria 	(default: check)', 'flag', '', NULL),
('weka.JRip(1)_F', 59, 'F', 'Set number of folds for REP\n	One fold is used as pruning set.\n	(default 3)', 'option', '3', NULL),
('weka.JRip(1)_N', 59, 'N', 'Set the minimal weights of instances\n	within a split.\n	(default 2.0)', 'option', '2.0', NULL),
('weka.JRip(1)_O', 59, 'O', 'Set the number of runs of\n	optimizations. (Default: 2)', 'option', '2', NULL),
('weka.JRip(1)_P', 59, 'P', 'Whether NOT use pruning\n	(default: use pruning)', 'flag', '', NULL),
('weka.JRip(1)_S', 59, 'S', 'The seed of randomization\n	(Default: 1)', 'option', '1', NULL),
('weka.K2(1)_N', 68, 'N', 'Initial structure is empty (instead of Naive Bayes)', 'flag', '', NULL),
('weka.K2(1)_P', 68, 'P', 'Maximum number of parents', 'option', '1', NULL),
('weka.K2(1)_R', 68, 'R', 'Random order.\n	(default false)', 'flag', '', NULL),
('weka.K2(1)_S', 68, 'S', 'Score type (BAYES, BDeu, MDL, ENTROPY and AIC)', 'option', 'BAYES', NULL),
('weka.K2(1)_mbc', 68, 'mbc', 'Applies a Markov Blanket correction to the network structure, \n	after a network structure is learned. This ensures that all \n	nodes in the network are part of the Markov blanket of the \n	classifier node.', 'flag', '', NULL),
('weka.LinearRegression(1)_C', 107, 'C', 'Do not try to eliminate colinear attributes.', 'flag', '', NULL),
('weka.LinearRegression(1)_D', 107, 'D', 'Produce debugging output.\n	(default no debugging output)', 'flag', '', NULL),
('weka.LinearRegression(1)_R', 107, 'R', 'Set ridge parameter (default 1.0e-8).', 'option', '1.0E-8', NULL),
('weka.LinearRegression(1)_S', 107, 'S', 'Set the attribute selection method to use. 1 = None, 2 = Greedy.\n	(default 0 = M5'' method)', 'option', '0', NULL),
('weka.LinearRegression(1)_minimal', 107, 'minimal', 'Conserve memory, don''t keep dataset header and means/stdevs.\n	Model cannot be printed out if this option is enabled.	(default: keep data)', 'flag', '', NULL),
('weka.Logistic(1)_C', 74, 'C', 'Use conjugate gradient descent rather than BFGS updates.', 'flag', '', NULL),
('weka.Logistic(1)_D', 74, 'D', 'Turn on debugging output.', 'flag', '', NULL),
('weka.Logistic(1)_M', 74, 'M', 'Set the maximum number of iterations (default -1, until convergence).', 'option', '-1', NULL),
('weka.Logistic(1)_R', 74, 'R', 'Set the ridge in the log-likelihood.', 'option', '1.0E-8', NULL),
('weka.LogitBoost_DecisionStump(1)_D', 77, 'D', 'If set, classifier is run in debug mode and\n	may output additional info to the console', 'flag', '', NULL),
('weka.LogitBoost_DecisionStump(1)_F', 77, 'F', 'Number of folds for internal cross-validation.\n	(default 0 -- no cross-validation)', 'option', '0', NULL),
('weka.LogitBoost_DecisionStump(1)_H', 77, 'H', 'Shrinkage parameter.\n	(default 1)', 'option', '1.0', NULL),
('weka.LogitBoost_DecisionStump(1)_I', 77, 'I', 'Number of iterations.\n	(default 10)', 'option', '10', NULL),
('weka.LogitBoost_DecisionStump(1)_L', 77, 'L', 'Threshold on the improvement of the likelihood.\n	(default -Double.MAX_VALUE)', 'option', '-1.7976931348623157E308', NULL),
('weka.LogitBoost_DecisionStump(1)_P', 77, 'P', 'Percentage of weight mass to base training on.\n	(default 100, reduce to around 90 speed up)', 'option', '100', NULL),
('weka.LogitBoost_DecisionStump(1)_Q', 77, 'Q', 'Use resampling instead of reweighting for boosting.', 'flag', '', NULL),
('weka.LogitBoost_DecisionStump(1)_R', 77, 'R', 'Number of runs for internal cross-validation.\n	(default 1)', 'option', '1', NULL),
('weka.LogitBoost_DecisionStump(1)_S', 77, 'S', 'Random number seed.\n	(default 1)', 'option', '1', NULL),
('weka.LogitBoost_DecisionStump(1)_W', 77, 'W', 'Full name of base classifier.\n	(default: weka.classifiers.trees.DecisionStump)', 'baselearner', 'weka.classifiers.trees.DecisionStump', NULL),
('weka.NaiveBayes(1)_D', 58, 'D', 'Use supervised discretization to process numeric attributes', 'flag', '', NULL),
('weka.NaiveBayes(1)_K', 58, 'K', 'Use kernel density estimator rather than normal\n	distribution for numeric attributes', 'flag', '', NULL),
('weka.NaiveBayes(1)_O', 58, 'O', 'Display model in old format (good when there are many classes)', 'flag', '', NULL),
('weka.OneR(1)_B', 57, 'B', 'The minimum number of objects in a bucket (default: 6).', 'option', '6', NULL),
('weka.OneR(2)_B', 104, 'B', 'The minimum number of objects in a bucket (default: 6).', 'option', '6', NULL),
('weka.PolyKernel(1)_C', 71, 'C', 'The size of the cache (a prime number), 0 for full cache and \n	-1 to turn it off.\n	(default: 250007)', 'option', '250007', NULL),
('weka.PolyKernel(1)_D', 71, 'D', 'Enables debugging output (if available) to be printed.\n	(default: off)', 'flag', '', NULL),
('weka.PolyKernel(1)_E', 71, 'E', 'The Exponent to use.\n	(default: 1.0)', 'option', '1.0', NULL),
('weka.PolyKernel(1)_L', 71, 'L', 'Use lower-order terms.\n	(default: no)', 'flag', '', NULL),
('weka.PolyKernel(1)_no-checks', 71, 'no-checks', 'Turns off all checks - use with caution!\n	(default: checks on)', 'flag', '', NULL),
('weka.PolyKernel(2)_C', 110, 'C', 'The size of the cache (a prime number), 0 for full cache and \n	-1 to turn it off.\n	(default: 250007)', 'option', '250007', NULL),
('weka.PolyKernel(2)_D', 110, 'D', 'Enables debugging output (if available) to be printed.\n	(default: off)', 'flag', '', NULL),
('weka.PolyKernel(2)_E', 110, 'E', 'The Exponent to use.\n	(default: 1.0)', 'option', '1.0', NULL),
('weka.PolyKernel(2)_L', 110, 'L', 'Use lower-order terms.\n	(default: no)', 'flag', '', NULL),
('weka.PolyKernel(2)_no-checks', 110, 'no-checks', 'Turns off all checks - use with caution!\n	(default: checks on)', 'flag', '', NULL),
('weka.RBFKernel(1)_C', 73, 'C', 'The size of the cache (a prime number), 0 for full cache and \n	-1 to turn it off.\n	(default: 250007)', 'option', '250007', NULL),
('weka.RBFKernel(1)_D', 73, 'D', 'Enables debugging output (if available) to be printed.\n	(default: off)', 'flag', '', NULL),
('weka.RBFKernel(1)_G', 73, 'G', 'The Gamma parameter.\n	(default: 0.01)', 'option', '0.01', NULL),
('weka.RBFKernel(1)_no-checks', 73, 'no-checks', 'Turns off all checks - use with caution!\n	(default: checks on)', 'flag', '', NULL),
('weka.REPTree(1)_I', 61, 'I', 'Initial class value count (default 0)', 'option', '0.0', NULL),
('weka.REPTree(1)_L', 61, 'L', 'Maximum tree depth (default -1, no maximum)', 'option', '-1', NULL),
('weka.REPTree(1)_M', 61, 'M', 'Set minimum number of instances per leaf (default 2).', 'option', '2', NULL),
('weka.REPTree(1)_N', 61, 'N', 'Number of folds for reduced error pruning (default 3).', 'option', '3', NULL),
('weka.REPTree(1)_P', 61, 'P', 'No pruning.', 'flag', '', NULL),
('weka.REPTree(1)_R', 61, 'R', 'Spread initial count over all class values (i.e. don''t use 1 per value)', 'flag', '', NULL),
('weka.REPTree(1)_S', 61, 'S', 'Seed for random data shuffling (default 1).', 'option', '1', NULL),
('weka.REPTree(1)_V', 61, 'V', 'Set minimum numeric class variance proportion\n	of train variance for split (default 1e-3).', 'option', '0.001', NULL),
('weka.REPTree(2)_I', 102, 'I', 'Initial class value count (default 0)', 'option', '0.0', NULL),
('weka.REPTree(2)_L', 102, 'L', 'Maximum tree depth (default -1, no maximum)', 'option', '-1', NULL),
('weka.REPTree(2)_M', 102, 'M', 'Set minimum number of instances per leaf (default 2).', 'option', '2', NULL),
('weka.REPTree(2)_N', 102, 'N', 'Number of folds for reduced error pruning (default 3).', 'option', '3', NULL),
('weka.REPTree(2)_P', 102, 'P', 'No pruning.', 'flag', '', NULL),
('weka.REPTree(2)_R', 102, 'R', 'Spread initial count over all class values (i.e. don''t use 1 per value)', 'flag', '', NULL),
('weka.REPTree(2)_S', 102, 'S', 'Seed for random data shuffling (default 1).', 'option', '1', NULL),
('weka.REPTree(2)_V', 102, 'V', 'Set minimum numeric class variance proportion\n	of train variance for split (default 1e-3).', 'option', '0.001', NULL),
('weka.RandomForest(1)_D', 65, 'D', 'If set, classifier is run in debug mode and\n	may output additional info to the console', 'flag', '', NULL),
('weka.RandomForest(1)_I', 65, 'I', 'Number of trees to build.', 'option', '10', NULL),
('weka.RandomForest(1)_K', 65, 'K', 'Number of features to consider (<1=int(logM+1)).', 'option', '0', NULL),
('weka.RandomForest(1)_S', 65, 'S', 'Seed for random number generator.\n	(default 1)', 'option', '1', NULL),
('weka.RandomForest(1)_depth', 65, 'depth', 'The maximum depth of the trees, 0 for unlimited.\n	(default 0)', 'option', '', NULL),
('weka.RandomForest(1)_num-slots', 65, 'num-slots', 'Number of execution slots.\n	(default 1 - i.e. no parallelism)', 'option', '1', NULL),
('weka.RandomForest(1)_print', 65, 'print', 'Print the individual trees in the output', 'flag', '', NULL),
('weka.RandomTree(1)_D', 64, 'D', 'If set, classifier is run in debug mode and\n	may output additional info to the console', 'flag', '', NULL),
('weka.RandomTree(1)_K', 64, 'K', 'Number of attributes to randomly investigate\n	(<0 = int(log_2(#attributes)+1)).', 'option', '0', NULL),
('weka.RandomTree(1)_M', 64, 'M', 'Set minimum number of instances per leaf.', 'option', '1.0', NULL),
('weka.RandomTree(1)_N', 64, 'N', 'Number of folds for backfitting (default 0, no backfitting).', 'option', '', NULL),
('weka.RandomTree(1)_S', 64, 'S', 'Seed for random number generator.\n	(default 1)', 'option', '1', NULL),
('weka.RandomTree(1)_U', 64, 'U', 'Allow unclassified instances.', 'flag', '', NULL),
('weka.RandomTree(1)_depth', 64, 'depth', 'The maximum depth of the tree, 0 for unlimited.\n	(default 0)', 'option', '', NULL),
('weka.SGD(1)_C', 69, 'C', 'The epsilon threshold (epsilon-insenstive and Huber loss only, default = 1e-3)', 'option', '0.001', NULL),
('weka.SGD(1)_E', 69, 'E', 'The number of epochs to perform (batch learning only, default = 500)', 'option', '500', NULL),
('weka.SGD(1)_F', 69, 'F', 'Set the loss function to minimize.\n	0 = hinge loss (SVM), 1 = log loss (logistic regression),\n	2 = squared loss (regression), 3 = epsilon insensitive loss (regression),\n	4 = Huber loss (regression).\n	(default = 0)', 'option', '0', NULL),
('weka.SGD(1)_L', 69, 'L', 'The learning rate. If normalization is\n	turned off (as it is automatically for streaming data), then the\n	default learning rate will need to be reduced (try 0.0001).\n	(default = 0.01).', 'option', '0.01', NULL),
('weka.SGD(1)_M', 69, 'M', 'Don''t replace missing values', 'flag', '', NULL),
('weka.SGD(1)_N', 69, 'N', 'Don''t normalize the data', 'flag', '', NULL),
('weka.SGD(1)_R', 69, 'R', 'The lambda regularization constant (default = 0.0001)', 'option', '1.0E-4', NULL),
('weka.SMO_PolyKernel(1)_C', 70, 'C', 'The complexity constant C. (default 1)', 'option', '1.0', NULL),
('weka.SMO_PolyKernel(1)_D', 70, 'D', 'If set, classifier is run in debug mode and\n	may output additional info to the console', 'flag', '', NULL),
('weka.SMO_PolyKernel(1)_E', 70, 'E', 'The Exponent to use.\n	(default: 1.0)', 'option', '', NULL),
('weka.SMO_PolyKernel(1)_K', 70, 'K', 'The Kernel to use.\n	(default: weka.classifiers.functions.supportVector.PolyKernel)', 'kernel', 'weka.classifiers.functions.supportVector.PolyKernel', NULL),
('weka.SMO_PolyKernel(1)_L', 70, 'L', 'The tolerance parameter. (default 1.0e-3)', 'option', '0.001', NULL),
('weka.SMO_PolyKernel(1)_M', 70, 'M', 'Fit logistic models to SVM outputs.', 'flag', '', NULL),
('weka.SMO_PolyKernel(1)_N', 70, 'N', 'Whether to 0=normalize/1=standardize/2=neither. (default 0=normalize)', 'option', '0', NULL),
('weka.SMO_PolyKernel(1)_P', 70, 'P', 'The epsilon for round-off error. (default 1.0e-12)', 'option', '1.0E-12', NULL),
('weka.SMO_PolyKernel(1)_V', 70, 'V', 'The number of folds for the internal\n	cross-validation. (default -1, use training data)', 'option', '-1', NULL),
('weka.SMO_PolyKernel(1)_W', 70, 'W', 'The random number seed. (default 1)', 'option', '1', NULL),
('weka.SMO_PolyKernel(1)_no-checks', 70, 'no-checks', 'Turns off all checks - use with caution!\n	Turning them off assumes that data is purely numeric, doesn''t\n	contain any missing values, and has a nominal class. Turning them\n	off also means that no header information will be stored if the\n	machine is linear. Finally, it also assumes that no instance has\n	a weight equal to 0.\n	(default: checks on)', 'flag', '', NULL),
('weka.SMO_PolyKernel(2)_C', 109, 'C', 'The complexity constant C. (default 1)', 'option', '1.0', NULL),
('weka.SMO_PolyKernel(2)_D', 109, 'D', 'If set, classifier is run in debug mode and\n	may output additional info to the console', 'flag', '', NULL),
('weka.SMO_PolyKernel(2)_E', 109, 'E', 'The Exponent to use.\n	(default: 1.0)', 'option', '', NULL),
('weka.SMO_PolyKernel(2)_K', 109, 'K', 'The Kernel to use.\n	(default: weka.classifiers.functions.supportVector.PolyKernel)', 'kernel', 'weka.classifiers.functions.supportVector.PolyKernel', NULL),
('weka.SMO_PolyKernel(2)_L', 109, 'L', 'The tolerance parameter. (default 1.0e-3)', 'option', '0.001', NULL),
('weka.SMO_PolyKernel(2)_M', 109, 'M', 'Fit logistic models to SVM outputs.', 'flag', '', NULL),
('weka.SMO_PolyKernel(2)_N', 109, 'N', 'Whether to 0=normalize/1=standardize/2=neither. (default 0=normalize)', 'option', '0', NULL),
('weka.SMO_PolyKernel(2)_P', 109, 'P', 'The epsilon for round-off error. (default 1.0e-12)', 'option', '1.0E-12', NULL),
('weka.SMO_PolyKernel(2)_V', 109, 'V', 'The number of folds for the internal\n	cross-validation. (default -1, use training data)', 'option', '-1', NULL),
('weka.SMO_PolyKernel(2)_W', 109, 'W', 'The random number seed. (default 1)', 'option', '1', NULL),
('weka.SMO_PolyKernel(2)_no-checks', 109, 'no-checks', 'Turns off all checks - use with caution!\n	Turning them off assumes that data is purely numeric, doesn''t\n	contain any missing values, and has a nominal class. Turning them\n	off also means that no header information will be stored if the\n	machine is linear. Finally, it also assumes that no instance has\n	a weight equal to 0.\n	(default: checks on)', 'flag', '', NULL),
('weka.SMO_RBFKernel(1)_C', 72, 'C', 'The complexity constant C. (default 1)', 'option', '1.0', NULL),
('weka.SMO_RBFKernel(1)_D', 72, 'D', 'If set, classifier is run in debug mode and\n	may output additional info to the console', 'flag', '', NULL),
('weka.SMO_RBFKernel(1)_E', 72, 'E', 'The Exponent to use.\n	(default: 1.0)', 'option', '', NULL),
('weka.SMO_RBFKernel(1)_K', 72, 'K', 'The Kernel to use.\n	(default: weka.classifiers.functions.supportVector.PolyKernel)', 'kernel', 'weka.classifiers.functions.supportVector.RBFKernel', NULL),
('weka.SMO_RBFKernel(1)_L', 72, 'L', 'The tolerance parameter. (default 1.0e-3)', 'option', '0.001', NULL),
('weka.SMO_RBFKernel(1)_M', 72, 'M', 'Fit logistic models to SVM outputs.', 'flag', '', NULL),
('weka.SMO_RBFKernel(1)_N', 72, 'N', 'Whether to 0=normalize/1=standardize/2=neither. (default 0=normalize)', 'option', '0', NULL),
('weka.SMO_RBFKernel(1)_P', 72, 'P', 'The epsilon for round-off error. (default 1.0e-12)', 'option', '1.0E-12', NULL),
('weka.SMO_RBFKernel(1)_V', 72, 'V', 'The number of folds for the internal\n	cross-validation. (default -1, use training data)', 'option', '-1', NULL),
('weka.SMO_RBFKernel(1)_W', 72, 'W', 'The random number seed. (default 1)', 'option', '1', NULL),
('weka.SMO_RBFKernel(1)_no-checks', 72, 'no-checks', 'Turns off all checks - use with caution!\n	Turning them off assumes that data is purely numeric, doesn''t\n	contain any missing values, and has a nominal class. Turning them\n	off also means that no header information will be stored if the\n	machine is linear. Finally, it also assumes that no instance has\n	a weight equal to 0.\n	(default: checks on)', 'flag', '', NULL),
('weka.ZeroR(1)_D', 56, 'D', 'If set, classifier is run in debug mode and\n	may output additional info to the console', 'flag', '', NULL);